---
title: "Predictive Modeling - chl a trends"
format: 
  html:
    toc: true
    code-fold: true
warning: false
message: false
error: true
embed-resources: true

---

# Setup  

```{r}
library(tidyverse)
library(MuMIn)
library(doParallel)
# library(glmmTMB)
library(lme4)
library(nlme)
library(tictoc)
library(vegan)
library(ggfortify)
library(car)
```

```{r}
source(here::here("R", "Analyses_for_paper",
                  "05_predictive_modeling",
                  "050_setup.R"))
```


Natural-log transforming nutrient medians and turbidity, to ensure linearity of effects and stabilize variance.  

Centering and standardizing (1SD) predictors to make sure model converges and aid in relative interpretation (comparing effect sizes among variables on very different scales); once we have a top model set/averaged model, we can back-transform and interpret slopes in their raw units.  



```{r}
# pick the specific predictors we've agreed on
# center and scale all but response 
dat_chl <- dat_all |> 
  select(reserve,
         chla_trend,
         # lat/temp/par/domgl PCA
         tpld_PC1,
         # wq medians
         spcond_median, turb_median.log,
         # wq trends
         temp_trend, spcond_trend, turb_trend,
         # nut medians
         chla_median.log, nh4_median.log, no23_median.log, po4_median.log,
         # nut trends
         nh4f_trend, no23f_trend, po4f_trend,
         # met
         precp_median, precp_trend) |> 
  mutate(across(!reserve,
                function(x) as.vector(scale(x))))

formula_chl <- paste0("chla_trend ~ ", paste(names(dat_chl[3:ncol(dat_chl)]), collapse = " + "), " + (1|reserve)")
formula_nlme <- paste0("chla_trend ~ ", paste(names(dat_chl[3:ncol(dat_chl)]), collapse = " + "))

```


# Models     

## Create and evaluate global models    

### Chl  

```{r}
mod_chl <- lme(as.formula(formula_nlme),
                data = dat_chl,
                random = ~ 1|reserve,
                method = "REML")
performance::check_singularity(mod_chl)
r.squaredGLMM(mod_chl)
summary(mod_chl)

# for leverage plots
mod_chl_lmer <- lmer(as.formula(formula_chl),
                data = dat_chl)
```

Marginal r2 = 0.228  
Cond'l r2 = 0.722  


#### Evaluate diagnostics  

```{r}
# assign model at top so this code chunk can be reused
mod = mod_chl


# this code shows a variety of plots, which is nice
performance::check_model(mod)
# VIFs look fine


# we'll look at other plots ourselves


# pull out pearson residuals
resids <- resid(mod, type = "pearson")

# pull out predictor data frame
preds_df <- mod$data

# set up a 4-plot layout
par(mfrow = c(2, 2))

# plot the main diagnostic graphs
plot(resids ~ fitted.values(mod),
     xlab = "fitted",
     ylab = "residual")
abline(h = 0, col = "red3")
hist(resids, breaks = 20)
qqnorm(resids)
qqline(resids, col = "gray60", lty = 2)
boxplot(resids ~ preds_df$reserve)

# set up a bigger plot layout
par(mfrow = c(4, 5))

# plot residuals against every predictor
for(i in 1:ncol(preds_df)){
  plot(resids ~ preds_df[[i]],
       xlab = names(preds_df)[i],
       ylab = "pearson residuals")
  abline(h = 0, col = "red3")
}

# go back to normal plot layout
par(mfrow = c(1, 1))
```

# Evaluate possibly influential observations  

```{r}
# 
# # look at some plots of leverage and influence
# plot(hatvalues(mod_chl_lmer), resids)
# cooks <- cooks.distance(mod_chl_lmer)
# 
# 
# # look at some potential problem predictors - we just don't want to see big values at the edges
# plot(hatvalues(mod_chl_lmer) ~ preds_df$spcond_trend)
# plot(cooks ~ preds_df$spcond_trend)
# plot(hatvalues(mod_chl_lmer) ~ preds_df$temp_trend)
# plot(cooks ~ preds_df$temp_trend)
```


The plot below graphs residual on the y-axis, hat-value (leverage) on the x-axis, and Cook's distance as size. Possibly influential data points are identified by row number. Note, we want to look at Pearson residuals for mixed models, and this shows studentized residuals - so my own plots will be a little different than this output. But it does identify the potentially problematic points, which I'll identify in a data frame (using the row numbers) and plot in a few various ways.  

```{r}
preds_df$possibly_influential <- FALSE
preds_df$possibly_influential[c(45, 81, 90, 94)] <- TRUE

preds_df$hats <- hatvalues(mod_chl_lmer)
preds_df$cooks <- cooks.distance(mod_chl_lmer)
preds_df$resids <- resid(mod_chl_lmer, type = "pearson")
preds_df$fitted <- fitted(mod_chl_lmer)

preds_df_long <- preds_df |> 
    pivot_longer(chla_trend:precp_trend,
                 names_to = "predictor",
                 values_to = "value")
```


```{r}
influencePlot(mod_chl_lmer)
```

We have one point with a LOT of leverage, and 3 that have fairly high Cook's distances compared to other points.  First though, what are all of these points, and how do they relate to the individual predictors?  

```{r}
cbind("station" = dat_all$station[c(45, 81, 90, 94)], dat_chl[c(45, 81, 90, 94), c("spcond_trend", "precp_median", "precp_trend", "temp_trend")], "Pearson residual" = preds_df$resids[c(45, 81, 90, 94)])
```

The 4 possibly influential points are in blue in the following graphs. We get concerned if they have high leverage (are far away from the mean in the predictor space) and are influential as calculated by Cook's D, which also incorporates the size of the y value (chl trend) for the point.    

```{r}
ggplot(preds_df_long,
       aes(x = value,
           y = cooks,
           col = possibly_influential)) +
    geom_point(size = 2, 
               alpha = 0.6) +
    facet_wrap(~predictor) +
    labs(title = "Cook's distances by predictor",
         x = "standardized predictor value",
         y = "Cook's D") +
    theme(legend.position = "bottom")

ggplot(preds_df_long,
       aes(x = value,
           y = resids,
           col = possibly_influential)) +
    geom_point(size = 2, 
               alpha = 0.6) +
    facet_wrap(~predictor) +
    geom_hline(yintercept = 0, col = "gray40") +
    labs(title = "Residuals by predictor",
         x = "standardized predictor value",
         y = "Pearson residual") +
    theme(legend.position = "bottom")

ggplot(preds_df,
       aes(x = fitted,
           y = chla_trend,
           col = possibly_influential)) +
    geom_point(size = 2,
               alpha = 0.6) +
    geom_abline(slope = 1, intercept = 0,
                linetype = "dashed") +
    labs(title = "Observed vs. fitted, Chl a",
         x = "Fitted chla trend (standardized)",
         y = "Observed chla trend (standardized)") +
    theme(legend.position = "bottom")

ggplot(preds_df,
       aes(x = fitted,
           y = resids,
           col = possibly_influential)) +
    geom_point(size = 2,
               alpha = 0.6) +
    geom_hline(yintercept = 0, col = "gray40") +
    labs(title = "Residuals vs. fitted, Chl a",
         x = "Fitted chla trend (standardized)",
         y = "Pearson residual") +
    theme(legend.position = "bottom")
```



```{r}
# cleanup a bit
rm(dat_all, mod, op, pca_tpl2, preds_df, preds_doLT2)
```

