---
title: "PAR time series graphs"
date: today
format: 
    html:
        toc: true
        toc-location: left
        echo: false
        embed-resources: true
warning: false
message: false
error: true
---

```{r}
library(dplyr)
library(tidyr)
library(ggplot2)
library(janitor)
library(plotly)
```

```{r, include = FALSE}
# generate a ggplotly object before loops to make loops work
p2 <- ggplot(iris, aes(x = Sepal.Width, y = Sepal.Length)) +
  geom_point()
ggplotly(p2)
```

```{r active-stations}
mstns <- readr::read_csv(here::here("helper_files", "sampling_stations.csv")) %>%  #read.csv threw an error for some reason
  janitor::clean_names() %>%   
  filter(status == "Active")

stns_active <- mstns %>% 
  mutate(station_code = stringr::str_squish(station_code)) %>% 
  pull(station_code)
```

```{r load-data}
path <- here::here("Data", "QAQCd_monthly_byType")

# met
load(here::here(path, "SWMP_monthlyMET.RData"))
met$reserve <- substr(met$station, start = 1, stop = 3)
```

```{r subset-met-data}
# filter: keep only this reserve
# select: identifying columns and min/median/max; no empty columns
# rename to remove extra underscores
dat <- met %>% 
  filter(station %in% stns_active) %>% 
  select(reserve, station, 
         year, month, 
         starts_with("dailyPAR")) 

# pivot
met_long <- dat %>% 
  pivot_longer(5:ncol(dat),
               names_to = c("param", "stat"),
               names_sep = "_",
               values_to = "value") %>% 
  pivot_wider(names_from = stat,
              values_from = value) %>%
  pivot_longer(min:max,
               names_to = "stat",
               values_to = "value") %>% 
  mutate(date = lubridate::ymd(paste(year, month, "15", sep = "-")),
         stat2 = case_when(stat %in% c("min", "max") ~ "min.max",
                           stat == "median" ~ "median",
                           .default = stat),
         stat2 = forcats::fct_relevel(stat2, "min.max", "median"),
         stat = forcats::fct_relevel(stat, "min", "median", "max"),
         hoverText = paste0(stat, " ", param, "\n", 
                            year, "-", month, "\n",
                            "value: ", value, "\n", 
                            "valid points: ", nValid))
```


```{r}
#| results: "asis" 
#| fig.height: 4
#| fig.width: 7

sts <- sort(unique(met_long$station))

for(i in seq_along(sts)){
  cat("\n")
  cat("##", sts[i], "\n")
  
  dat_sub <- filter(met_long, station == sts[i])
  p <- ggplot(dat_sub, aes(x = date, y = value, col = stat)) +
    geom_line(linewidth = 0.3) +
    geom_point(aes(text = hoverText), # this produces a warning but trying any other way messes up the line geom
               size = 0.6) +
    facet_grid(station ~ stat2) +
    theme_bw() +
    theme(legend.position = "top",
          legend.justification = "left",
          legend.margin = margin(c(0,0,0,0))) +
    labs(x = "Date",
         y = "value",
         col = "")
  
    ggplotly(p,
             tooltip = "text",
           width = 675, height = 350) %>%  
    layout(legend = list(orientation = "h",
                         y = 1.25, x = 0)) %>% 
    htmltools::tagList() %>%
    print()
    
  cat("\n")
  
}

```

